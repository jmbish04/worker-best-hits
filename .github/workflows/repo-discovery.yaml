name: Repository Discovery

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      categories:
        description: 'Comma-separated categories to search (or leave empty for all)'
        required: false
        default: ''

env:
  CLOUDFLARE_WORKER_URL: ${{ secrets.CLOUDFLARE_WORKER_URL }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  discover-repositories:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install requests python-dateutil pyyaml

      - name: Create necessary directories
        run: |
          mkdir -p scripts/discovery
          mkdir -p discovery-results
          mkdir -p .github/discovery-state

      - name: Run repository discovery
        id: discovery
        run: |
          python3 scripts/discovery/discover_repos.py \
            --output discovery-results/recommendations-$(date +%Y-%m-%d).json \
            --cloudflare-endpoint "${CLOUDFLARE_WORKER_URL}/search" \
            --github-token "${GITHUB_TOKEN}" \
            --state-file .github/discovery-state/processed-repos.json \
            ${CATEGORIES:+--categories "$CATEGORIES"}
        env:
          CATEGORIES: ${{ github.event.inputs.categories }}

      - name: Generate discovery report
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          from pathlib import Path

          # Find the most recent recommendations file
          results_dir = Path('discovery-results')
          recommendation_files = sorted(results_dir.glob('recommendations-*.json'), reverse=True)

          if not recommendation_files:
              print("No recommendation files found")
              exit(0)

          latest_file = recommendation_files[0]

          with open(latest_file, 'r') as f:
              data = json.load(f)

          # Generate markdown report
          report = f"""# Repository Discovery Report

**Date**: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}

## Summary

Total repositories discovered: {data.get('total_discovered', 0)}
Total recommendations: {data.get('total_recommendations', 0)}

## Recommendations by Category

"""

          recommendations = data.get('recommendations', {})
          for category, repos in recommendations.items():
              report += f"\n### {category}\n\n"
              if repos:
                  for repo in repos:
                      report += f"- **{repo['name']}**\n"
                      report += f"  - URL: {repo['url']}\n"
                      report += f"  - Description: {repo.get('description', 'N/A')}\n"
                      report += f"  - Stars: {repo.get('stars', 0)} | Forks: {repo.get('forks', 0)}\n"
                      report += f"  - Last Updated: {repo.get('updated_at', 'N/A')}\n"
                      if 'reasoning' in repo:
                          report += f"  - Why: {repo['reasoning']}\n"
                      report += "\n"
              else:
                  report += "No new recommendations in this category.\n\n"

          # Save report
          report_file = f"discovery-results/report-{datetime.utcnow().strftime('%Y-%m-%d')}.md"
          with open(report_file, 'w') as f:
              f.write(report)

          print(f"Report generated: {report_file}")

          # Set output for GitHub Actions summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(report)

          # Check if there are new recommendations
          has_recommendations = data.get('total_recommendations', 0) > 0
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_recommendations={'true' if has_recommendations else 'false'}\n")
              f.write(f"report_file={report_file}\n")
          EOF

      - name: Commit discovery results
        if: steps.discovery.outputs.has_recommendations == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add discovery-results/
          git add .github/discovery-state/

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: repository discovery results

New repository recommendations discovered

Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Automated discovery run"
            git push
          fi

      - name: Report discovery status
        if: always()
        run: |
          echo "Repository discovery completed"
          echo "Status: ${{ job.status }}"
          if [ -f "${{ steps.discovery.outputs.report_file }}" ]; then
            echo "Report available at: ${{ steps.discovery.outputs.report_file }}"
          fi
